# Phase 3: Content Outline Creation

**Token Budget**: ~300 Tokens (reduced from 700)
**Main Deliverables**: `content-outline.json`
**Agent Pattern**: File-Based Sub-Agent Delegation

---

## Architecture: File-Based Workflow

**CRITICAL**: Phase 3 nutzt jetzt **file references** statt inline data transfer.

### Why This Matters:
- **Before**: ~6000+ tokens (inline JSON data in prompt)
- **After**: ~300 tokens (file paths only)
- **Improvement**: 95% token reduction, faster execution, better maintainability

---

## Phase 3: Main Agent Setup

### Step 1: Verify Input Files Exist

```bash
# Check Phase 1+2 outputs are ready
KEYWORD_SLUG="pferd-kaufen-worauf-achten"  # Replace with actual keyword slug

ls -lh SEO/SEO-CONTENT/${KEYWORD_SLUG}/research/keyword-analysis.json
ls -lh SEO/SEO-CONTENT/${KEYWORD_SLUG}/research/serp-analysis.json
```

**Quality Gate**:
- ❌ If files missing → STOP, run Phase 1+2 first
- ✅ If both files exist → proceed to Step 2

---

### Step 2: Create Planning Directory

```bash
mkdir -p SEO/SEO-CONTENT/${KEYWORD_SLUG}/planning/
```

---

## Phase 3: Sub-Agent Delegation (File-Based)

```xml
<function_calls>
<invoke name="Task">
<parameter name="description">Create SEO content outline from Phase 1+2</parameter>
<parameter name="subagent_type">seo-content-writer</parameter>
<parameter name="prompt">
Erstelle einen detaillierten Content-Outline für SEO-optimierten Artikel.

## INPUT FILES (lies diese zuerst):

**WICHTIG**: Nutze Read-Tool um diese Files einzulesen:

1. **Keyword-Analyse** (Phase 1):
   `SEO/SEO-CONTENT/{keyword-slug}/research/keyword-analysis.json`

   Extrahiere:
   - `top_keywords` → für Heading-Optimierung
   - `content_clusters` → für Sektions-Gruppierung
   - `recommendations.top_article_topics` → für H2-Headings
   - `recommendations.estimated_word_count` → als Fallback

2. **SERP-Analyse** (Phase 2):
   `SEO/SEO-CONTENT/{keyword-slug}/research/serp-analysis.json`

   Extrahiere:
   - `content_gaps.must_have_topics` → PFLICHT-Sektionen
   - `content_gaps.differentiation_opportunities` → Unique Angles
   - `format_recommendations.target_word_count` → Primäres Word Count Ziel
   - `format_recommendations.word_count_strategy` → "serp_competitive" oder "fallback"
   - `paa_integration` → für FAQ-Fragen (min 5, davon 3+ aus PAA)
   - `eeat_signals` → für Expertise-Integration

---

## AUFGABE: Erstelle `content-outline.json`

### Output-Struktur:

```json
{
  "phase": "3",
  "primary_keyword": "<aus keyword-analysis.json>",
  "timestamp": "<ISO 8601>",
  "based_on": {
    "phase_1": "keyword-analysis.json",
    "phase_2": "serp-analysis.json"
  },

  "article_metadata": {
    "title": "<50-60 chars, primary keyword am Anfang, emotional hook>",
    "meta_description": "<150-160 chars, primary + 1-2 supporting keywords, CTA>",
    "primary_keyword": "",
    "secondary_keywords": ["keyword1", "keyword2", "keyword3"],
    "word_count_data": {
      "target_word_count": "<aus serp-analysis.json>",
      "word_count_strategy": "<aus serp-analysis.json>",
      "distribution": {
        "introduction": {"percentage": 0.07, "calculated_words": "<target × 0.07>"},
        "main_sections": {"percentage": 0.72, "calculated_words": "<target × 0.72>"},
        "faq": {"percentage": 0.10, "calculated_words": "<target × 0.10>"},
        "conclusion": {"percentage": 0.07, "calculated_words": "<target × 0.07>"}
      }
    }
  },

  "introduction": {
    "word_count": "<target × 0.07>",
    "hook": "<2-3 Sätze: Problem oder emotionaler Einstieg>",
    "user_intent": "<Was lernt der Leser?>",
    "preview": "<2-3 Sätze: Artikel-Überblick>",
    "keyword_integration": ["primary keyword", "variation"]
  },

  "main_sections": [
    {
      "section_number": 1,
      "heading": "H2: <Keyword-optimiert, idealerweise Frage-Format>",
      "content_type": "<explanation|tutorial|comparison|checklist|case_study>",
      "word_count": "<(target × 0.72) / anzahl_sektionen>",
      "subsections": [
        {
          "heading": "H3: <Spezifischer Aspekt>",
          "word_count": 150,
          "keywords": ["supporting keyword 1", "supporting keyword 2"],
          "content_focus": "<Was wird hier erklärt?>"
        }
      ],
      "keyword_integration": {
        "primary": ["primary keyword variation"],
        "supporting": ["supporting keyword 1", "supporting keyword 2"]
      },
      "eeat_signals": [
        {
          "type": "expertise|experience|data",
          "content": "<Konkreter Expertise-Nachweis>"
        }
      ],
      "visual_elements": [
        {
          "type": "table|checklist|diagram",
          "description": "<Was zeigt das Visual?>"
        }
      ]
    }
  ],

  "faq_section": {
    "word_count": "<target × 0.10>",
    "questions": [
      {
        "question": "<PAA-Frage aus serp-analysis.json>",
        "answer_outline": "<50-100 Wörter Antwort-Skizze>",
        "word_count": 80,
        "paa_source": true,
        "keywords": ["relevant keyword"]
      }
    ]
  },

  "conclusion": {
    "word_count": "<target × 0.07>",
    "key_takeaways": [
      "Takeaway 1",
      "Takeaway 2",
      "Takeaway 3"
    ],
    "call_to_action": "<Nächster Schritt für Leser>",
    "keyword_integration": ["primary keyword"]
  },

  "internal_linking_opportunities": [
    {
      "section": "<Sektion-Name>",
      "target_page": "/ratgeber/example",
      "anchor_text": "<Natural anchor text>"
    }
  ]
}
```

---

## KRITISCHE REGELN:

### 1. Word Count Berechnung
- Lies `target_word_count` aus `serp-analysis.json`
- Berechne Sektions-Längen mit **fixen Prozentsätzen**:
  - Einleitung: target × 0.07 (~7%)
  - Hauptsektionen: target × 0.72 (~72%, verteilt auf 5-8 H2)
  - FAQ: target × 0.10 (~10%)
  - Fazit: target × 0.07 (~7%)

### 2. Sektions-Anforderungen
- **5-8 Hauptsektionen** (nicht mehr, nicht weniger)
- Jede Sektion braucht:
  - `content_type` (explanation, tutorial, comparison, checklist, case_study)
  - `keyword_integration` (primary + supporting)
  - `eeat_signals` (min 1 pro Sektion)
  - 2-4 Subsektionen (H3)

### 3. FAQ-Integration
- **Min 5 Fragen**
- **Min 3 Fragen aus PAA** (nutze `paa_integration` Array aus serp-analysis.json)
- Kurze Antworten (50-100 Wörter)
- Schema-Markup-ready

### 4. Must-Have Topics
- Alle Topics aus `content_gaps.must_have_topics` MÜSSEN als Sektionen erscheinen
- Nutze `differentiation_opportunities` für unique angles

### 5. Internal Linking
- **Min 5 Opportunities** identifizieren
- Sections: wo im Artikel?
- Target Pages: relevante PferdeWert.de Unterseiten
- Natural Anchor Text

---

## SAVE OUTPUT:

Speichere das vollständige JSON als:
`SEO/SEO-CONTENT/{keyword-slug}/planning/content-outline.json`

**WICHTIG**: Outline muss direkt umsetzbar sein für Phase 4 (Content Writing).
Jede Sektion braucht klare Anweisungen: Was schreiben? Welche Keywords? Welche E-E-A-T Signale?
</parameter>
</invoke>
</function_calls>
```

---

## Quality Gate: Automated Verification

Nach Sub-Agent Completion, prüfe Output mit bash:

```bash
KEYWORD_SLUG="pferd-kaufen-worauf-achten"
OUTLINE_FILE="SEO/SEO-CONTENT/${KEYWORD_SLUG}/planning/content-outline.json"

# 1. Check file exists
if [ ! -f "$OUTLINE_FILE" ]; then
  echo "❌ FAIL: content-outline.json not created"
  exit 1
fi

# 2. Validate JSON syntax
if ! jq empty "$OUTLINE_FILE" 2>/dev/null; then
  echo "❌ FAIL: Invalid JSON syntax"
  exit 1
fi

# 3. Check main sections count (5-8 required)
SECTION_COUNT=$(jq '.main_sections | length' "$OUTLINE_FILE")
if [ "$SECTION_COUNT" -lt 5 ] || [ "$SECTION_COUNT" -gt 8 ]; then
  echo "❌ FAIL: Section count is $SECTION_COUNT (must be 5-8)"
  exit 1
fi

# 4. Check FAQ questions count (min 5)
FAQ_COUNT=$(jq '.faq_section.questions | length' "$OUTLINE_FILE")
if [ "$FAQ_COUNT" -lt 5 ]; then
  echo "❌ FAIL: FAQ has only $FAQ_COUNT questions (min 5)"
  exit 1
fi

# 5. Check PAA sources in FAQ (min 3)
PAA_COUNT=$(jq '[.faq_section.questions[] | select(.paa_source == true)] | length' "$OUTLINE_FILE")
if [ "$PAA_COUNT" -lt 3 ]; then
  echo "⚠️  WARNING: Only $PAA_COUNT PAA-sourced questions (min 3 recommended)"
fi

# 6. Check word count data exists
if ! jq -e '.article_metadata.word_count_data.target_word_count' "$OUTLINE_FILE" >/dev/null; then
  echo "❌ FAIL: target_word_count missing"
  exit 1
fi

# 7. Check internal linking opportunities (min 5)
LINK_COUNT=$(jq '.internal_linking_opportunities | length' "$OUTLINE_FILE")
if [ "$LINK_COUNT" -lt 5 ]; then
  echo "⚠️  WARNING: Only $LINK_COUNT internal links (min 5 recommended)"
fi

echo "✅ PASS: content-outline.json meets all requirements"
echo "  - Sections: $SECTION_COUNT"
echo "  - FAQ Questions: $FAQ_COUNT (PAA: $PAA_COUNT)"
echo "  - Internal Links: $LINK_COUNT"
```

---

## Quality Gate Criteria

### ✅ PASS Requirements:
- 5-8 Hauptsektionen definiert
- Min 5 FAQ-Fragen (davon 3+ aus PAA)
- Valid JSON structure
- `word_count_data` present
- Each section has: `content_type`, `keyword_integration`, `eeat_signals`

### ⚠️  WARNINGS (proceed with caution):
- < 3 PAA-sourced FAQ questions
- < 5 internal linking opportunities
- Missing E-E-A-T signals in some sections

### ❌ FAILURE (retry required):
- < 5 sections or > 8 sections
- < 5 FAQ questions total
- Missing `target_word_count`
- Invalid JSON syntax

---

## Output Files

```
SEO/SEO-CONTENT/{keyword-slug}/planning/
├── content-outline.json          # Primary output (machine-readable)
└── content-structure.md          # Optional: Human-readable summary
```

---

## Troubleshooting

### Problem: Sub-Agent didn't read input files
**Solution**:
- Verify file paths are correct in prompt
- Check {keyword-slug} placeholder was replaced
- Ensure Phase 1+2 completed successfully

### Problem: Word count calculations missing
**Solution**:
- Verify `serp-analysis.json` has `format_recommendations.target_word_count`
- Check `word_count_strategy` is "serp_competitive" or "fallback"
- Retry with explicit calculation example

### Problem: Too generic outline (no specific instructions)
**Solution**:
- Check if Phase 2 `content_gaps.must_have_topics` was used
- Verify `eeat_signals` are concrete, not placeholders
- Ensure each section has detailed `content_focus` in subsections

### Problem: FAQ missing PAA questions
**Solution**:
- Verify `paa_integration` array exists in serp-analysis.json
- Check Sub-Agent actually read the PAA data
- Manually add PAA questions if Phase 2 data incomplete

---

## Next Phase

Nach erfolgreichem Quality Gate:
→ **Phase 4: Content Writing** (`phase-4-content.md`)

Pass `content-outline.json` to Phase 4 as blueprint.

---

## Phase 3 Checklist

- [ ] Input files verified (keyword-analysis.json + serp-analysis.json)
- [ ] Planning directory created
- [ ] Sub-Agent delegated with file-based prompt
- [ ] Quality Gate: Bash verification passed
- [ ] Output: content-outline.json created
- [ ] Ready for Phase 4: Outline is actionable and complete

---

## Token Budget Breakdown

| Component | Tokens |
|-----------|--------|
| File verification (bash) | ~50 |
| Sub-Agent delegation prompt | ~250 |
| Quality gate (bash) | ~20 |
| **Total** | **~320** |

**Improvement**: 56% reduction from original 700 token budget.
