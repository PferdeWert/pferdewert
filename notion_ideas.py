#!/usr/bin/env python3
"""
Notion Ideen Integration - Mit intelligenter √úberschriften-Generierung
Erstellt formatierte Ideen-Eintr√§ge mit KI-generierten √úberschriften
"""

import os
import sys
import re
from datetime import datetime
from notion_client import Client

def generate_idea_title(content: str) -> str:
    """Generiert eine passende √úberschrift f√ºr die Idee basierend auf dem Inhalt"""
    content_lower = content.lower()
    
    # Einfache Keyword-basierte √úberschriftengenerierung
    keywords_mapping = {
        # Business & Startups
        'startup': 'üöÄ Startup-Idee',
        'business': 'üíº Business-Konzept', 
        'geld verdienen': 'üí∞ Monetarisierung',
        'app': 'üì± App-Konzept',
        'website': 'üåê Website-Idee',
        'saas': '‚ö° SaaS-Konzept',
        
        # Tech & Development
        'ki': 'ü§ñ KI-Innovation',
        'ai': 'ü§ñ AI-Konzept',
        'automatisierung': '‚öôÔ∏è Automatisierungs-Idee',
        'integration': 'üîó Integration-Konzept',
        'api': 'üîå API-Idee',
        'bot': 'ü§ñ Bot-Konzept',
        
        # Marketing & Content
        'marketing': 'üì¢ Marketing-Strategie',
        'content': 'üìù Content-Idee', 
        'seo': 'üîç SEO-Optimierung',
        'social media': 'üì± Social-Media-Konzept',
        'video': 'üé• Video-Idee',
        'blog': '‚úçÔ∏è Blog-Konzept',
        
        # PferdeWert specific
        'pferd': 'üê¥ PferdeWert-Feature',
        'bewertung': 'üìä Bewertungs-Verbesserung',
        'pferdewert': 'üê¥ PferdeWert-Innovation',
        'algorithmus': 'üßÆ Algorithmus-Idee',
        
        # Creative & Design
        'design': 'üé® Design-Konzept',
        'ux': 'üë• UX-Verbesserung',
        'ui': 'üñºÔ∏è UI-Innovation',
        'feature': '‚ú® Feature-Idee',
        'verbesserung': 'üìà Verbesserungs-Vorschlag',
        
        # Personal & Life
        'leben': 'üå± Lebens-Idee',
        'produktivit√§t': '‚ö° Produktivit√§ts-Hack',
        'lernen': 'üìö Lern-Konzept',
        'reise': '‚úàÔ∏è Reise-Idee',
        'hobby': 'üéØ Hobby-Projekt',
        
        # Random & Creative
        'experiment': 'üß™ Experiment-Idee',
        'projekt': 'üèóÔ∏è Projekt-Konzept',
        'tool': 'üõ†Ô∏è Tool-Idee',
        'l√∂sung': 'üí° L√∂sungs-Ansatz'
    }
    
    # Suche nach Keywords im Content (l√§ngere zuerst f√ºr bessere Matches)
    sorted_keywords = sorted(keywords_mapping.items(), key=lambda x: len(x[0]), reverse=True)
    for keyword, title in sorted_keywords:
        if keyword in content_lower:
            return title
    
    # Fallback: Basierend auf Satztyp
    if '?' in content:
        return '‚ùì Frage & √úberlegung'
    elif any(word in content_lower for word in ['sollte', 'k√∂nnte', 'm√∂chte', 'will']):
        return 'üéØ Vorhaben & Ziel'
    elif any(word in content_lower for word in ['problem', 'issue', 'fehler']):
        return 'üîß Problem-Analyse'
    elif len(content) > 200:
        return 'üìã Ausf√ºhrliche √úberlegung'
    elif len(content) < 50:
        return 'üí≠ Kurze Eingebung'
    else:
        return 'üí° Spontane Idee'

def add_idea_entry(content: str):
    """F√ºgt Ideen-Eintrag mit KI-generierter √úberschrift hinzu"""
    try:
        token = os.getenv("NOTION_TOKEN")
        page_id = os.getenv("NOTION_IDEEN_PAGE_ID")
        
        if not token or not page_id:
            print("‚ùå NOTION_TOKEN and NOTION_IDEEN_PAGE_ID required")
            print("üí° Set NOTION_IDEEN_PAGE_ID=250dc0a2-92bf-81f4-ac57-deb643442baa in .env")
            return False
        
        notion = Client(auth=token)
        
        # Deutsche Datumsformatierung
        now = datetime.now()
        today = now.strftime("%d.%m.%Y")
        time_now = now.strftime("%H:%M")
        weekday = now.strftime("%A")
        
        # Deutsche Wochentage
        german_weekdays = {
            'Monday': 'Montag', 'Tuesday': 'Dienstag', 'Wednesday': 'Mittwoch',
            'Thursday': 'Donnerstag', 'Friday': 'Freitag', 'Saturday': 'Samstag', 'Sunday': 'Sonntag'
        }
        weekday_german = german_weekdays.get(weekday, weekday)
        
        # Intelligente √úberschrift generieren
        smart_title = generate_idea_title(content)
        
        # Formatierte Bl√∂cke mit Datum UND intelligenter √úberschrift
        new_blocks = [
            {
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [{"text": {"content": f"üìÖ **{today}** ({weekday_german}) - {time_now}"}}]
                }
            },
            {
                "type": "heading_3", 
                "heading_3": {
                    "rich_text": [{"text": {"content": smart_title}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"text": {"content": f"üí≠ {content}"}}]
                }
            },
            {
                "type": "divider",
                "divider": {}
            }
        ]
        
        # Sicher anh√§ngen
        print(f"üí° Erstelle Ideen-Eintrag f√ºr {today} {time_now}...")
        print(f"üè∑Ô∏è Generierte √úberschrift: {smart_title}")
        
        response = notion.blocks.children.append(
            block_id=page_id,
            children=new_blocks
        )
        
        print(f"‚úÖ Ideen-Eintrag erstellt: {today} ({weekday_german}) - {time_now}")
        print(f"üè∑Ô∏è √úberschrift: {smart_title}")
        print(f"üí° Inhalt: {content[:100]}{'...' if len(content) > 100 else ''}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler: {str(e)}")
        return False

def list_recent_ideas(days: int = 7):
    """Listet die letzten Ideen-Eintr√§ge auf"""
    try:
        token = os.getenv("NOTION_TOKEN")
        page_id = os.getenv("NOTION_IDEEN_PAGE_ID")
        
        if not token or not page_id:
            print("‚ùå NOTION_TOKEN und NOTION_IDEEN_PAGE_ID required")
            return False
            
        notion = Client(auth=token)
        
        # Page Blocks abrufen
        blocks = []
        has_more = True
        cursor = None
        
        while has_more:
            response = notion.blocks.children.list(
                block_id=page_id,
                start_cursor=cursor
            )
            blocks.extend(response['results'])
            has_more = response['has_more']
            cursor = response.get('next_cursor')
        
        # Letzte Eintr√§ge extrahieren
        recent_entries = []
        for block in blocks[-30:]:  # Letzte 30 Bl√∂cke
            if block['type'] == 'heading_2':
                heading_text = ""
                for text_obj in block['heading_2']['rich_text']:
                    heading_text += text_obj['text']['content']
                if 'üìÖ' in heading_text:
                    recent_entries.append(heading_text)
        
        print(f"üí° Letzte {min(len(recent_entries), days)} Ideen-Eintr√§ge:")
        for entry in recent_entries[-days:]:
            print(f"  {entry}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler beim Abrufen der Ideen: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage:")
        print("  python notion_ideas.py add 'Ideen Inhalt'")
        print("  python notion_ideas.py list [days]")
        print("")
        print("Features:")
        print("  üè∑Ô∏è Intelligente √úberschriften-Generierung basierend auf Inhalt")
        print("  üìÖ Deutsche Datumsformatierung mit Wochentag")
        print("  üí° Emoji-Kategorisierung (Business, Tech, Creative, etc.)")
        print("")
        print("Environment variables required:")
        print("  NOTION_TOKEN=your_notion_token")
        print("  NOTION_IDEEN_PAGE_ID=250dc0a2-92bf-81f4-ac57-deb643442baa")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "add":
        if len(sys.argv) < 3:
            print("‚ùå Content required for idea entry")
            sys.exit(1)
        content = " ".join(sys.argv[2:])
        add_idea_entry(content)
        
    elif command == "list":
        days = 7
        if len(sys.argv) > 2:
            try:
                days = int(sys.argv[2])
            except ValueError:
                print("‚ùå Days must be a number")
                sys.exit(1)
        list_recent_ideas(days)
        
    else:
        print(f"‚ùå Unknown command: {command}")
        print("Available commands: add, list")
        sys.exit(1)